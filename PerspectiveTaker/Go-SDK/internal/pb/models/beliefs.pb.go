// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: proto/models/beliefs.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Belief types
type BeliefType int32

const (
	BeliefType_BELIEF_TYPE_INVALID BeliefType = 0
	BeliefType_STATEMENT           BeliefType = 1
	BeliefType_FALSIFIABLE         BeliefType = 2
	BeliefType_CAUSAL              BeliefType = 3
)

// Enum value maps for BeliefType.
var (
	BeliefType_name = map[int32]string{
		0: "BELIEF_TYPE_INVALID",
		1: "STATEMENT",
		2: "FALSIFIABLE",
		3: "CAUSAL",
	}
	BeliefType_value = map[string]int32{
		"BELIEF_TYPE_INVALID": 0,
		"STATEMENT":           1,
		"FALSIFIABLE":         2,
		"CAUSAL":              3,
	}
)

func (x BeliefType) Enum() *BeliefType {
	p := new(BeliefType)
	*p = x
	return p
}

func (x BeliefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeliefType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_beliefs_proto_enumTypes[0].Descriptor()
}

func (BeliefType) Type() protoreflect.EnumType {
	return &file_proto_models_beliefs_proto_enumTypes[0]
}

func (x BeliefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BeliefType.Descriptor instead.
func (BeliefType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{0}
}

// Types of epistemic emotions that emerge from discrepancies
type EpistemicEmotion int32

const (
	EpistemicEmotion_EMOTION_INVALID EpistemicEmotion = 0
	EpistemicEmotion_CONFIRMATION    EpistemicEmotion = 1
	EpistemicEmotion_SURPRISE        EpistemicEmotion = 2
	EpistemicEmotion_CURIOSITY       EpistemicEmotion = 3
	EpistemicEmotion_CONFUSION       EpistemicEmotion = 4
)

// Enum value maps for EpistemicEmotion.
var (
	EpistemicEmotion_name = map[int32]string{
		0: "EMOTION_INVALID",
		1: "CONFIRMATION",
		2: "SURPRISE",
		3: "CURIOSITY",
		4: "CONFUSION",
	}
	EpistemicEmotion_value = map[string]int32{
		"EMOTION_INVALID": 0,
		"CONFIRMATION":    1,
		"SURPRISE":        2,
		"CURIOSITY":       3,
		"CONFUSION":       4,
	}
)

func (x EpistemicEmotion) Enum() *EpistemicEmotion {
	p := new(EpistemicEmotion)
	*p = x
	return p
}

func (x EpistemicEmotion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpistemicEmotion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_beliefs_proto_enumTypes[1].Descriptor()
}

func (EpistemicEmotion) Type() protoreflect.EnumType {
	return &file_proto_models_beliefs_proto_enumTypes[1]
}

func (x EpistemicEmotion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpistemicEmotion.Descriptor instead.
func (EpistemicEmotion) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{1}
}

// Base content and confidence messages
type Content struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawStr        string                 `protobuf:"bytes,1,opt,name=raw_str,json=rawStr,proto3" json:"raw_str,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_proto_models_beliefs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{0}
}

func (x *Content) GetRawStr() string {
	if x != nil {
		return x.RawStr
	}
	return ""
}

type ConfidenceRating struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConfidenceScore float64                `protobuf:"fixed64,1,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
	Default         bool                   `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfidenceRating) Reset() {
	*x = ConfidenceRating{}
	mi := &file_proto_models_beliefs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfidenceRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidenceRating) ProtoMessage() {}

func (x *ConfidenceRating) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidenceRating.ProtoReflect.Descriptor instead.
func (*ConfidenceRating) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{1}
}

func (x *ConfidenceRating) GetConfidenceScore() float64 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *ConfidenceRating) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

// BeliefContext represents the relationship between a Belief and an ObservationContext
type BeliefContext struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	BeliefId                 string                 `protobuf:"bytes,1,opt,name=belief_id,json=beliefId,proto3" json:"belief_id,omitempty"`
	ObservationContextId     string                 `protobuf:"bytes,2,opt,name=observation_context_id,json=observationContextId,proto3" json:"observation_context_id,omitempty"`
	ConfidenceRatings        []*ConfidenceRating    `protobuf:"bytes,3,rep,name=confidence_ratings,json=confidenceRatings,proto3" json:"confidence_ratings,omitempty"`
	ConditionalProbabilities map[string]float32     `protobuf:"bytes,4,rep,name=conditional_probabilities,json=conditionalProbabilities,proto3" json:"conditional_probabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	DiscrepancyIds           []string               `protobuf:"bytes,5,rep,name=discrepancy_ids,json=discrepancyIds,proto3" json:"discrepancy_ids,omitempty"`
	EpistemicEmotion         EpistemicEmotion       `protobuf:"varint,6,opt,name=epistemic_emotion,json=epistemicEmotion,proto3,enum=EpistemicEmotion" json:"epistemic_emotion,omitempty"`
	EmotionIntensity         float32                `protobuf:"fixed32,7,opt,name=emotion_intensity,json=emotionIntensity,proto3" json:"emotion_intensity,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BeliefContext) Reset() {
	*x = BeliefContext{}
	mi := &file_proto_models_beliefs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeliefContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefContext) ProtoMessage() {}

func (x *BeliefContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefContext.ProtoReflect.Descriptor instead.
func (*BeliefContext) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{2}
}

func (x *BeliefContext) GetBeliefId() string {
	if x != nil {
		return x.BeliefId
	}
	return ""
}

func (x *BeliefContext) GetObservationContextId() string {
	if x != nil {
		return x.ObservationContextId
	}
	return ""
}

func (x *BeliefContext) GetConfidenceRatings() []*ConfidenceRating {
	if x != nil {
		return x.ConfidenceRatings
	}
	return nil
}

func (x *BeliefContext) GetConditionalProbabilities() map[string]float32 {
	if x != nil {
		return x.ConditionalProbabilities
	}
	return nil
}

func (x *BeliefContext) GetDiscrepancyIds() []string {
	if x != nil {
		return x.DiscrepancyIds
	}
	return nil
}

func (x *BeliefContext) GetEpistemicEmotion() EpistemicEmotion {
	if x != nil {
		return x.EpistemicEmotion
	}
	return EpistemicEmotion_EMOTION_INVALID
}

func (x *BeliefContext) GetEmotionIntensity() float32 {
	if x != nil {
		return x.EmotionIntensity
	}
	return 0
}

// The main Belief message
type Belief struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SelfModelId   string                 `protobuf:"bytes,2,opt,name=self_model_id,json=selfModelId,proto3" json:"self_model_id,omitempty"`
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Type          BeliefType             `protobuf:"varint,4,opt,name=type,proto3,enum=BeliefType" json:"type,omitempty"`
	Content       []*Content             `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Belief) Reset() {
	*x = Belief{}
	mi := &file_proto_models_beliefs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Belief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Belief) ProtoMessage() {}

func (x *Belief) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Belief.ProtoReflect.Descriptor instead.
func (*Belief) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{3}
}

func (x *Belief) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Belief) GetSelfModelId() string {
	if x != nil {
		return x.SelfModelId
	}
	return ""
}

func (x *Belief) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Belief) GetType() BeliefType {
	if x != nil {
		return x.Type
	}
	return BeliefType_BELIEF_TYPE_INVALID
}

func (x *Belief) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// BeliefSystem with conceptualization
type BeliefSystem struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Beliefs             []*Belief              `protobuf:"bytes,1,rep,name=beliefs,proto3" json:"beliefs,omitempty"`
	ObservationContexts []*ObservationContext  `protobuf:"bytes,2,rep,name=observation_contexts,json=observationContexts,proto3" json:"observation_contexts,omitempty"`
	BeliefContexts      []*BeliefContext       `protobuf:"bytes,3,rep,name=belief_contexts,json=beliefContexts,proto3" json:"belief_contexts,omitempty"`
	Metrics             *BeliefSystem_Metrics  `protobuf:"bytes,4,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Ontology            *BeliefSystem_Ontology `protobuf:"bytes,5,opt,name=ontology,proto3" json:"ontology,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BeliefSystem) Reset() {
	*x = BeliefSystem{}
	mi := &file_proto_models_beliefs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeliefSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefSystem) ProtoMessage() {}

func (x *BeliefSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefSystem.ProtoReflect.Descriptor instead.
func (*BeliefSystem) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{4}
}

func (x *BeliefSystem) GetBeliefs() []*Belief {
	if x != nil {
		return x.Beliefs
	}
	return nil
}

func (x *BeliefSystem) GetObservationContexts() []*ObservationContext {
	if x != nil {
		return x.ObservationContexts
	}
	return nil
}

func (x *BeliefSystem) GetBeliefContexts() []*BeliefContext {
	if x != nil {
		return x.BeliefContexts
	}
	return nil
}

func (x *BeliefSystem) GetMetrics() *BeliefSystem_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *BeliefSystem) GetOntology() *BeliefSystem_Ontology {
	if x != nil {
		return x.Ontology
	}
	return nil
}

type BeliefSystem_Metrics struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ClarificationScore      float64                `protobuf:"fixed64,1,opt,name=clarification_score,json=clarificationScore,proto3" json:"clarification_score,omitempty"`
	TotalBeliefs            int32                  `protobuf:"varint,2,opt,name=total_beliefs,json=totalBeliefs,proto3" json:"total_beliefs,omitempty"`
	TotalFalsifiableBeliefs int32                  `protobuf:"varint,3,opt,name=total_falsifiable_beliefs,json=totalFalsifiableBeliefs,proto3" json:"total_falsifiable_beliefs,omitempty"`
	TotalCausalBeliefs      int32                  `protobuf:"varint,4,opt,name=total_causal_beliefs,json=totalCausalBeliefs,proto3" json:"total_causal_beliefs,omitempty"`
	TotalBeliefStatements   int32                  `protobuf:"varint,5,opt,name=total_belief_statements,json=totalBeliefStatements,proto3" json:"total_belief_statements,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *BeliefSystem_Metrics) Reset() {
	*x = BeliefSystem_Metrics{}
	mi := &file_proto_models_beliefs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeliefSystem_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefSystem_Metrics) ProtoMessage() {}

func (x *BeliefSystem_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefSystem_Metrics.ProtoReflect.Descriptor instead.
func (*BeliefSystem_Metrics) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BeliefSystem_Metrics) GetClarificationScore() float64 {
	if x != nil {
		return x.ClarificationScore
	}
	return 0
}

func (x *BeliefSystem_Metrics) GetTotalBeliefs() int32 {
	if x != nil {
		return x.TotalBeliefs
	}
	return 0
}

func (x *BeliefSystem_Metrics) GetTotalFalsifiableBeliefs() int32 {
	if x != nil {
		return x.TotalFalsifiableBeliefs
	}
	return 0
}

func (x *BeliefSystem_Metrics) GetTotalCausalBeliefs() int32 {
	if x != nil {
		return x.TotalCausalBeliefs
	}
	return 0
}

func (x *BeliefSystem_Metrics) GetTotalBeliefStatements() int32 {
	if x != nil {
		return x.TotalBeliefStatements
	}
	return 0
}

type BeliefSystem_Ontology struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawStr        string                 `protobuf:"bytes,1,opt,name=raw_str,json=rawStr,proto3" json:"raw_str,omitempty"`
	GeneratedAt   int64                  `protobuf:"varint,2,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	Contexts      []*BeliefContext       `protobuf:"bytes,3,rep,name=contexts,proto3" json:"contexts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeliefSystem_Ontology) Reset() {
	*x = BeliefSystem_Ontology{}
	mi := &file_proto_models_beliefs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeliefSystem_Ontology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefSystem_Ontology) ProtoMessage() {}

func (x *BeliefSystem_Ontology) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefSystem_Ontology.ProtoReflect.Descriptor instead.
func (*BeliefSystem_Ontology) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BeliefSystem_Ontology) GetRawStr() string {
	if x != nil {
		return x.RawStr
	}
	return ""
}

func (x *BeliefSystem_Ontology) GetGeneratedAt() int64 {
	if x != nil {
		return x.GeneratedAt
	}
	return 0
}

func (x *BeliefSystem_Ontology) GetContexts() []*BeliefContext {
	if x != nil {
		return x.Contexts
	}
	return nil
}

var File_proto_models_beliefs_proto protoreflect.FileDescriptor

var file_proto_models_beliefs_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x61, 0x77, 0x53, 0x74, 0x72, 0x22, 0x57, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0xf2, 0x03, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x42, 0x65,
	0x6c, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x11,
	0x65, 0x70, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x74, 0x65,
	0x6d, 0x69, 0x63, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x70, 0x69, 0x73,
	0x74, 0x65, 0x6d, 0x69, 0x63, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x1a, 0x4b, 0x0a, 0x1d, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x06, 0x42, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x05, 0x0a, 0x0c, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x52,
	0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x46, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x13, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x0f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x65, 0x6c, 0x69,
	0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x62, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x42, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x85,
	0x02, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6c, 0x73, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x72, 0x0a, 0x08, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2a, 0x51, 0x0a, 0x0a, 0x42, 0x65,
	0x6c, 0x69, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x45, 0x4c, 0x49,
	0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4c, 0x53, 0x49, 0x46, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x65, 0x0a,
	0x10, 0x45, 0x70, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x52, 0x50,
	0x52, 0x49, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x52, 0x49, 0x4f, 0x53,
	0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x42, 0x1d, 0x5a, 0x1b, 0x65, 0x70, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x69,
	0x63, 0x2d, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_models_beliefs_proto_rawDescOnce sync.Once
	file_proto_models_beliefs_proto_rawDescData = file_proto_models_beliefs_proto_rawDesc
)

func file_proto_models_beliefs_proto_rawDescGZIP() []byte {
	file_proto_models_beliefs_proto_rawDescOnce.Do(func() {
		file_proto_models_beliefs_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_models_beliefs_proto_rawDescData)
	})
	return file_proto_models_beliefs_proto_rawDescData
}

var file_proto_models_beliefs_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_models_beliefs_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_models_beliefs_proto_goTypes = []any{
	(BeliefType)(0),               // 0: BeliefType
	(EpistemicEmotion)(0),         // 1: EpistemicEmotion
	(*Content)(nil),               // 2: Content
	(*ConfidenceRating)(nil),      // 3: ConfidenceRating
	(*BeliefContext)(nil),         // 4: BeliefContext
	(*Belief)(nil),                // 5: Belief
	(*BeliefSystem)(nil),          // 6: BeliefSystem
	nil,                           // 7: BeliefContext.ConditionalProbabilitiesEntry
	(*BeliefSystem_Metrics)(nil),  // 8: BeliefSystem.Metrics
	(*BeliefSystem_Ontology)(nil), // 9: BeliefSystem.Ontology
	(*ObservationContext)(nil),    // 10: ObservationContext
}
var file_proto_models_beliefs_proto_depIdxs = []int32{
	3,  // 0: BeliefContext.confidence_ratings:type_name -> ConfidenceRating
	7,  // 1: BeliefContext.conditional_probabilities:type_name -> BeliefContext.ConditionalProbabilitiesEntry
	1,  // 2: BeliefContext.epistemic_emotion:type_name -> EpistemicEmotion
	0,  // 3: Belief.type:type_name -> BeliefType
	2,  // 4: Belief.content:type_name -> Content
	5,  // 5: BeliefSystem.beliefs:type_name -> Belief
	10, // 6: BeliefSystem.observation_contexts:type_name -> ObservationContext
	4,  // 7: BeliefSystem.belief_contexts:type_name -> BeliefContext
	8,  // 8: BeliefSystem.metrics:type_name -> BeliefSystem.Metrics
	9,  // 9: BeliefSystem.ontology:type_name -> BeliefSystem.Ontology
	4,  // 10: BeliefSystem.Ontology.contexts:type_name -> BeliefContext
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_models_beliefs_proto_init() }
func file_proto_models_beliefs_proto_init() {
	if File_proto_models_beliefs_proto != nil {
		return
	}
	file_proto_models_observation_context_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_models_beliefs_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_models_beliefs_proto_goTypes,
		DependencyIndexes: file_proto_models_beliefs_proto_depIdxs,
		EnumInfos:         file_proto_models_beliefs_proto_enumTypes,
		MessageInfos:      file_proto_models_beliefs_proto_msgTypes,
	}.Build()
	File_proto_models_beliefs_proto = out.File
	file_proto_models_beliefs_proto_rawDesc = nil
	file_proto_models_beliefs_proto_goTypes = nil
	file_proto_models_beliefs_proto_depIdxs = nil
}
