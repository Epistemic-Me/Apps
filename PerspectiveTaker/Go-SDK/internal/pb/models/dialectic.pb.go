// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: proto/models/dialectic.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Add STATUS enum definition
type STATUS int32

const (
	STATUS_STATUS_INVALID  STATUS = 0
	STATUS_PENDING_ANSWER  STATUS = 1
	STATUS_ANSWERED        STATUS = 2
	STATUS_BELIEFS_UPDATED STATUS = 3
)

// Enum value maps for STATUS.
var (
	STATUS_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "PENDING_ANSWER",
		2: "ANSWERED",
		3: "BELIEFS_UPDATED",
	}
	STATUS_value = map[string]int32{
		"STATUS_INVALID":  0,
		"PENDING_ANSWER":  1,
		"ANSWERED":        2,
		"BELIEFS_UPDATED": 3,
	}
)

func (x STATUS) Enum() *STATUS {
	p := new(STATUS)
	*p = x
	return p
}

func (x STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[0].Descriptor()
}

func (STATUS) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[0]
}

func (x STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STATUS.Descriptor instead.
func (STATUS) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{0}
}

// Add InteractionType enum
type InteractionType int32

const (
	InteractionType_INTERACTION_TYPE_INVALID InteractionType = 0
	InteractionType_QUESTION_ANSWER          InteractionType = 1
	InteractionType_HYPOTHESIS_EVIDENCE      InteractionType = 2
	InteractionType_ACTION_OUTCOME           InteractionType = 3
)

// Enum value maps for InteractionType.
var (
	InteractionType_name = map[int32]string{
		0: "INTERACTION_TYPE_INVALID",
		1: "QUESTION_ANSWER",
		2: "HYPOTHESIS_EVIDENCE",
		3: "ACTION_OUTCOME",
	}
	InteractionType_value = map[string]int32{
		"INTERACTION_TYPE_INVALID": 0,
		"QUESTION_ANSWER":          1,
		"HYPOTHESIS_EVIDENCE":      2,
		"ACTION_OUTCOME":           3,
	}
)

func (x InteractionType) Enum() *InteractionType {
	p := new(InteractionType)
	*p = x
	return p
}

func (x InteractionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[1].Descriptor()
}

func (InteractionType) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[1]
}

func (x InteractionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionType.Descriptor instead.
func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{1}
}

// Add ActionType enum
type ActionType int32

const (
	ActionType_ACTION_TYPE_INVALID ActionType = 0
	ActionType_ANSWER_QUESTION     ActionType = 1
	ActionType_COLLECT_EVIDENCE    ActionType = 2
	ActionType_ACTUATE_OUTCOME     ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_INVALID",
		1: "ANSWER_QUESTION",
		2: "COLLECT_EVIDENCE",
		3: "ACTUATE_OUTCOME",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_INVALID": 0,
		"ANSWER_QUESTION":     1,
		"COLLECT_EVIDENCE":    2,
		"ACTUATE_OUTCOME":     3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{2}
}

// The Dialectic Type informs the "strategy" of how the
// agent will attempt to generate questions and interpret beliefs
// from the user's responses.
type DialecticType int32

const (
	DialecticType_INVALID             DialecticType = 0
	DialecticType_DEFAULT             DialecticType = 1
	DialecticType_HEGELIAN            DialecticType = 2
	DialecticType_SLEEP_DIET_EXERCISE DialecticType = 3
)

// Enum value maps for DialecticType.
var (
	DialecticType_name = map[int32]string{
		0: "INVALID",
		1: "DEFAULT",
		2: "HEGELIAN",
		3: "SLEEP_DIET_EXERCISE",
	}
	DialecticType_value = map[string]int32{
		"INVALID":             0,
		"DEFAULT":             1,
		"HEGELIAN":            2,
		"SLEEP_DIET_EXERCISE": 3,
	}
)

func (x DialecticType) Enum() *DialecticType {
	p := new(DialecticType)
	*p = x
	return p
}

func (x DialecticType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DialecticType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[3].Descriptor()
}

func (DialecticType) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[3]
}

func (x DialecticType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DialecticType.Descriptor instead.
func (DialecticType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{3}
}

// Move ObservationType here from beliefs.proto
type ObservationType int32

const (
	ObservationType_OBSERVATION_TYPE_INVALID ObservationType = 0
	ObservationType_ANSWER                   ObservationType = 1
	ObservationType_EVIDENCE                 ObservationType = 2
	ObservationType_OUTCOME                  ObservationType = 3
)

// Enum value maps for ObservationType.
var (
	ObservationType_name = map[int32]string{
		0: "OBSERVATION_TYPE_INVALID",
		1: "ANSWER",
		2: "EVIDENCE",
		3: "OUTCOME",
	}
	ObservationType_value = map[string]int32{
		"OBSERVATION_TYPE_INVALID": 0,
		"ANSWER":                   1,
		"EVIDENCE":                 2,
		"OUTCOME":                  3,
	}
)

func (x ObservationType) Enum() *ObservationType {
	p := new(ObservationType)
	*p = x
	return p
}

func (x ObservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[4].Descriptor()
}

func (ObservationType) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[4]
}

func (x ObservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationType.Descriptor instead.
func (ObservationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{4}
}

// Labels the system that is driving the agent's behavior.
// This may include generating the question, synthesizing
// the user's answers into beliefs, and then synthesizing
// the user's supposed beliefs into a belief system
// that can be used for further generations.
type Agent_AgentType int32

const (
	Agent_AGENT_TYPE_INVALID    Agent_AgentType = 0 // Invalid agent type.
	Agent_AGENT_TYPE_GPT_LATEST Agent_AgentType = 1 // Latest GPT model.
	Agent_AGENT_TYPE_HUMAN      Agent_AgentType = 2 // A human user.
)

// Enum value maps for Agent_AgentType.
var (
	Agent_AgentType_name = map[int32]string{
		0: "AGENT_TYPE_INVALID",
		1: "AGENT_TYPE_GPT_LATEST",
		2: "AGENT_TYPE_HUMAN",
	}
	Agent_AgentType_value = map[string]int32{
		"AGENT_TYPE_INVALID":    0,
		"AGENT_TYPE_GPT_LATEST": 1,
		"AGENT_TYPE_HUMAN":      2,
	}
)

func (x Agent_AgentType) Enum() *Agent_AgentType {
	p := new(Agent_AgentType)
	*p = x
	return p
}

func (x Agent_AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Agent_AgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_dialectic_proto_enumTypes[5].Descriptor()
}

func (Agent_AgentType) Type() protoreflect.EnumType {
	return &file_proto_models_dialectic_proto_enumTypes[5]
}

func (x Agent_AgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Agent_AgentType.Descriptor instead.
func (Agent_AgentType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{6, 0}
}

// A Question represents a request for information
// from a user. The intent behind a question is to extract
// beliefs from the end user in the form of an answer.
// This data model may evolve in the future to track
// the origination of how the question is generated,
// as well as a "dialectical context" of which beliefs
// the agent is attempting to extract from the user.
type Question struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Question           string                 `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	CreatedAtMillisUtc int64                  `protobuf:"varint,2,opt,name=created_at_millis_utc,json=createdAtMillisUtc,proto3" json:"created_at_millis_utc,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_proto_models_dialectic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{0}
}

func (x *Question) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Question) GetCreatedAtMillisUtc() int64 {
	if x != nil {
		return x.CreatedAtMillisUtc
	}
	return 0
}

// A User Answer is a response to a question that
// may or may not contain an embedded belief, which can be
// extracted at a later point in time.
type UserAnswer struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserAnswer         string                 `protobuf:"bytes,1,opt,name=user_answer,json=userAnswer,proto3" json:"user_answer,omitempty"`
	CreatedAtMillisUtc int64                  `protobuf:"varint,2,opt,name=created_at_millis_utc,json=createdAtMillisUtc,proto3" json:"created_at_millis_utc,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserAnswer) Reset() {
	*x = UserAnswer{}
	mi := &file_proto_models_dialectic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnswer) ProtoMessage() {}

func (x *UserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnswer.ProtoReflect.Descriptor instead.
func (*UserAnswer) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{1}
}

func (x *UserAnswer) GetUserAnswer() string {
	if x != nil {
		return x.UserAnswer
	}
	return ""
}

func (x *UserAnswer) GetCreatedAtMillisUtc() int64 {
	if x != nil {
		return x.CreatedAtMillisUtc
	}
	return 0
}

// Question-Answer interaction for extracting beliefs
type QuestionAnswerInteraction struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Question           *Question              `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answer             *UserAnswer            `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	ExtractedBeliefs   []*Belief              `protobuf:"bytes,3,rep,name=extracted_beliefs,json=extractedBeliefs,proto3" json:"extracted_beliefs,omitempty"`
	UpdatedAtMillisUtc int64                  `protobuf:"varint,4,opt,name=updated_at_millis_utc,json=updatedAtMillisUtc,proto3" json:"updated_at_millis_utc,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QuestionAnswerInteraction) Reset() {
	*x = QuestionAnswerInteraction{}
	mi := &file_proto_models_dialectic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAnswerInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswerInteraction) ProtoMessage() {}

func (x *QuestionAnswerInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswerInteraction.ProtoReflect.Descriptor instead.
func (*QuestionAnswerInteraction) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{2}
}

func (x *QuestionAnswerInteraction) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QuestionAnswerInteraction) GetAnswer() *UserAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *QuestionAnswerInteraction) GetExtractedBeliefs() []*Belief {
	if x != nil {
		return x.ExtractedBeliefs
	}
	return nil
}

func (x *QuestionAnswerInteraction) GetUpdatedAtMillisUtc() int64 {
	if x != nil {
		return x.UpdatedAtMillisUtc
	}
	return 0
}

// Hypothesis-Evidence interaction for testing beliefs
type HypothesisEvidenceInteraction struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Hypothesis         string                 `protobuf:"bytes,1,opt,name=hypothesis,proto3" json:"hypothesis,omitempty"`
	Evidence           string                 `protobuf:"bytes,2,opt,name=evidence,proto3" json:"evidence,omitempty"`
	IsCounterfactual   bool                   `protobuf:"varint,3,opt,name=is_counterfactual,json=isCounterfactual,proto3" json:"is_counterfactual,omitempty"`
	UpdatedBeliefs     []*Belief              `protobuf:"bytes,4,rep,name=updated_beliefs,json=updatedBeliefs,proto3" json:"updated_beliefs,omitempty"`
	UpdatedAtMillisUtc int64                  `protobuf:"varint,5,opt,name=updated_at_millis_utc,json=updatedAtMillisUtc,proto3" json:"updated_at_millis_utc,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HypothesisEvidenceInteraction) Reset() {
	*x = HypothesisEvidenceInteraction{}
	mi := &file_proto_models_dialectic_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HypothesisEvidenceInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypothesisEvidenceInteraction) ProtoMessage() {}

func (x *HypothesisEvidenceInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypothesisEvidenceInteraction.ProtoReflect.Descriptor instead.
func (*HypothesisEvidenceInteraction) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{3}
}

func (x *HypothesisEvidenceInteraction) GetHypothesis() string {
	if x != nil {
		return x.Hypothesis
	}
	return ""
}

func (x *HypothesisEvidenceInteraction) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *HypothesisEvidenceInteraction) GetIsCounterfactual() bool {
	if x != nil {
		return x.IsCounterfactual
	}
	return false
}

func (x *HypothesisEvidenceInteraction) GetUpdatedBeliefs() []*Belief {
	if x != nil {
		return x.UpdatedBeliefs
	}
	return nil
}

func (x *HypothesisEvidenceInteraction) GetUpdatedAtMillisUtc() int64 {
	if x != nil {
		return x.UpdatedAtMillisUtc
	}
	return 0
}

// Action-Outcome interaction for testing causal beliefs
type ActionOutcomeInteraction struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Action             string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Outcome            string                 `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
	UpdatedBeliefs     []*Belief              `protobuf:"bytes,3,rep,name=updated_beliefs,json=updatedBeliefs,proto3" json:"updated_beliefs,omitempty"`
	UpdatedAtMillisUtc int64                  `protobuf:"varint,4,opt,name=updated_at_millis_utc,json=updatedAtMillisUtc,proto3" json:"updated_at_millis_utc,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ActionOutcomeInteraction) Reset() {
	*x = ActionOutcomeInteraction{}
	mi := &file_proto_models_dialectic_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionOutcomeInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOutcomeInteraction) ProtoMessage() {}

func (x *ActionOutcomeInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOutcomeInteraction.ProtoReflect.Descriptor instead.
func (*ActionOutcomeInteraction) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{4}
}

func (x *ActionOutcomeInteraction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ActionOutcomeInteraction) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *ActionOutcomeInteraction) GetUpdatedBeliefs() []*Belief {
	if x != nil {
		return x.UpdatedBeliefs
	}
	return nil
}

func (x *ActionOutcomeInteraction) GetUpdatedAtMillisUtc() int64 {
	if x != nil {
		return x.UpdatedAtMillisUtc
	}
	return 0
}

// Update DialecticalInteraction to use the new types
type DialecticalInteraction struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status STATUS                 `protobuf:"varint,1,opt,name=status,proto3,enum=STATUS" json:"status,omitempty"`
	Type   InteractionType        `protobuf:"varint,2,opt,name=type,proto3,enum=InteractionType" json:"type,omitempty"`
	Id     string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// One of these based on type
	//
	// Types that are valid to be assigned to Interaction:
	//
	//	*DialecticalInteraction_QuestionAnswer
	//	*DialecticalInteraction_HypothesisEvidence
	//	*DialecticalInteraction_ActionOutcome
	Interaction          isDialecticalInteraction_Interaction `protobuf_oneof:"interaction"`
	PredictedObservation *Observation                         `protobuf:"bytes,7,opt,name=predicted_observation,json=predictedObservation,proto3" json:"predicted_observation,omitempty"`
	Action               *Action                              `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	Observation          *Observation                         `protobuf:"bytes,9,opt,name=observation,proto3" json:"observation,omitempty"`
	Discrepancy          *Discrepancy                         `protobuf:"bytes,10,opt,name=discrepancy,proto3" json:"discrepancy,omitempty"`
	UpdatedAtMillisUtc   int64                                `protobuf:"varint,11,opt,name=updated_at_millis_utc,json=updatedAtMillisUtc,proto3" json:"updated_at_millis_utc,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DialecticalInteraction) Reset() {
	*x = DialecticalInteraction{}
	mi := &file_proto_models_dialectic_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialecticalInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialecticalInteraction) ProtoMessage() {}

func (x *DialecticalInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialecticalInteraction.ProtoReflect.Descriptor instead.
func (*DialecticalInteraction) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{5}
}

func (x *DialecticalInteraction) GetStatus() STATUS {
	if x != nil {
		return x.Status
	}
	return STATUS_STATUS_INVALID
}

func (x *DialecticalInteraction) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_INTERACTION_TYPE_INVALID
}

func (x *DialecticalInteraction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DialecticalInteraction) GetInteraction() isDialecticalInteraction_Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *DialecticalInteraction) GetQuestionAnswer() *QuestionAnswerInteraction {
	if x != nil {
		if x, ok := x.Interaction.(*DialecticalInteraction_QuestionAnswer); ok {
			return x.QuestionAnswer
		}
	}
	return nil
}

func (x *DialecticalInteraction) GetHypothesisEvidence() *HypothesisEvidenceInteraction {
	if x != nil {
		if x, ok := x.Interaction.(*DialecticalInteraction_HypothesisEvidence); ok {
			return x.HypothesisEvidence
		}
	}
	return nil
}

func (x *DialecticalInteraction) GetActionOutcome() *ActionOutcomeInteraction {
	if x != nil {
		if x, ok := x.Interaction.(*DialecticalInteraction_ActionOutcome); ok {
			return x.ActionOutcome
		}
	}
	return nil
}

func (x *DialecticalInteraction) GetPredictedObservation() *Observation {
	if x != nil {
		return x.PredictedObservation
	}
	return nil
}

func (x *DialecticalInteraction) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DialecticalInteraction) GetObservation() *Observation {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *DialecticalInteraction) GetDiscrepancy() *Discrepancy {
	if x != nil {
		return x.Discrepancy
	}
	return nil
}

func (x *DialecticalInteraction) GetUpdatedAtMillisUtc() int64 {
	if x != nil {
		return x.UpdatedAtMillisUtc
	}
	return 0
}

type isDialecticalInteraction_Interaction interface {
	isDialecticalInteraction_Interaction()
}

type DialecticalInteraction_QuestionAnswer struct {
	QuestionAnswer *QuestionAnswerInteraction `protobuf:"bytes,4,opt,name=question_answer,json=questionAnswer,proto3,oneof"`
}

type DialecticalInteraction_HypothesisEvidence struct {
	HypothesisEvidence *HypothesisEvidenceInteraction `protobuf:"bytes,5,opt,name=hypothesis_evidence,json=hypothesisEvidence,proto3,oneof"`
}

type DialecticalInteraction_ActionOutcome struct {
	ActionOutcome *ActionOutcomeInteraction `protobuf:"bytes,6,opt,name=action_outcome,json=actionOutcome,proto3,oneof"`
}

func (*DialecticalInteraction_QuestionAnswer) isDialecticalInteraction_Interaction() {}

func (*DialecticalInteraction_HypothesisEvidence) isDialecticalInteraction_Interaction() {}

func (*DialecticalInteraction_ActionOutcome) isDialecticalInteraction_Interaction() {}

// The agent represents information about what underlying
// system or user is responsible for interacting with the
// user throughout the dialectic. This is intended to
// be some AI system (e.g., LLM) but may evolve to be a human
// user in the future.
type Agent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentType     Agent_AgentType        `protobuf:"varint,1,opt,name=agent_type,json=agentType,proto3,enum=Agent_AgentType" json:"agent_type,omitempty"`           // The type of the agent.
	DialecticType DialecticType          `protobuf:"varint,2,opt,name=dialectic_type,json=dialecticType,proto3,enum=DialecticType" json:"dialectic_type,omitempty"` // The dialectic strategy used by the agent.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_proto_models_dialectic_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{6}
}

func (x *Agent) GetAgentType() Agent_AgentType {
	if x != nil {
		return x.AgentType
	}
	return Agent_AGENT_TYPE_INVALID
}

func (x *Agent) GetDialecticType() DialecticType {
	if x != nil {
		return x.DialecticType
	}
	return DialecticType_INVALID
}

// The dialectic can be seen as a session that gets created
// and presents a user with a series of questions designed to
// determine and clarify the user's beliefs. The beliefs produced
// as part of the dialectic may or may not be fed into the user's
// underlying belief system.
type Dialectic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier for the dialectic.
	// The user who the dialectic is "serving" in the sense
	// of who questions are being presented to and whose answers
	// represent the beliefs.
	SelfModelId      string                    `protobuf:"bytes,2,opt,name=self_model_id,json=selfModelId,proto3" json:"self_model_id,omitempty"`
	Agent            *Agent                    `protobuf:"bytes,3,opt,name=agent,proto3" json:"agent,omitempty"`                                               // The agent conducting the dialectic.
	UserInteractions []*DialecticalInteraction `protobuf:"bytes,4,rep,name=user_interactions,json=userInteractions,proto3" json:"user_interactions,omitempty"` // Interactions within the dialectic.
	BeliefSystem     *BeliefSystem             `protobuf:"bytes,5,opt,name=belief_system,json=beliefSystem,proto3" json:"belief_system,omitempty"`             // Add this line
	Analysis         *BeliefAnalysis           `protobuf:"bytes,6,opt,name=analysis,proto3" json:"analysis,omitempty"`                                         // Add this line
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Dialectic) Reset() {
	*x = Dialectic{}
	mi := &file_proto_models_dialectic_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dialectic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dialectic) ProtoMessage() {}

func (x *Dialectic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dialectic.ProtoReflect.Descriptor instead.
func (*Dialectic) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{7}
}

func (x *Dialectic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dialectic) GetSelfModelId() string {
	if x != nil {
		return x.SelfModelId
	}
	return ""
}

func (x *Dialectic) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Dialectic) GetUserInteractions() []*DialecticalInteraction {
	if x != nil {
		return x.UserInteractions
	}
	return nil
}

func (x *Dialectic) GetBeliefSystem() *BeliefSystem {
	if x != nil {
		return x.BeliefSystem
	}
	return nil
}

func (x *Dialectic) GetAnalysis() *BeliefAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

// Add a new message for the analysis
type BeliefAnalysis struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Coherence       float32                `protobuf:"fixed32,1,opt,name=coherence,proto3" json:"coherence,omitempty"`
	Consistency     float32                `protobuf:"fixed32,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
	Falsifiability  float32                `protobuf:"fixed32,3,opt,name=falsifiability,proto3" json:"falsifiability,omitempty"`
	OverallScore    float32                `protobuf:"fixed32,4,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	Feedback        string                 `protobuf:"bytes,5,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Recommendations []string               `protobuf:"bytes,6,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	VerifiedBeliefs []string               `protobuf:"bytes,7,rep,name=verified_beliefs,json=verifiedBeliefs,proto3" json:"verified_beliefs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BeliefAnalysis) Reset() {
	*x = BeliefAnalysis{}
	mi := &file_proto_models_dialectic_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeliefAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefAnalysis) ProtoMessage() {}

func (x *BeliefAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefAnalysis.ProtoReflect.Descriptor instead.
func (*BeliefAnalysis) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{8}
}

func (x *BeliefAnalysis) GetCoherence() float32 {
	if x != nil {
		return x.Coherence
	}
	return 0
}

func (x *BeliefAnalysis) GetConsistency() float32 {
	if x != nil {
		return x.Consistency
	}
	return 0
}

func (x *BeliefAnalysis) GetFalsifiability() float32 {
	if x != nil {
		return x.Falsifiability
	}
	return 0
}

func (x *BeliefAnalysis) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *BeliefAnalysis) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *BeliefAnalysis) GetRecommendations() []string {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *BeliefAnalysis) GetVerifiedBeliefs() []string {
	if x != nil {
		return x.VerifiedBeliefs
	}
	return nil
}

// Action represents a way to change the world state
type Action struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier for the action
	Type                   ActionType             `protobuf:"varint,2,opt,name=type,proto3,enum=ActionType" json:"type,omitempty"`
	DialecticInteractionId string                 `protobuf:"bytes,3,opt,name=dialectic_interaction_id,json=dialecticInteractionId,proto3" json:"dialectic_interaction_id,omitempty"` // Reference to the interaction
	InterventionId         string                 `protobuf:"bytes,4,opt,name=intervention_id,json=interventionId,proto3" json:"intervention_id,omitempty"`                           // Optional reference to a defined intervention
	Timestamp              int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_proto_models_dialectic_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{9}
}

func (x *Action) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Action) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_ACTION_TYPE_INVALID
}

func (x *Action) GetDialecticInteractionId() string {
	if x != nil {
		return x.DialecticInteractionId
	}
	return ""
}

func (x *Action) GetInterventionId() string {
	if x != nil {
		return x.InterventionId
	}
	return ""
}

func (x *Action) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Observation represents the observed state after an action
type Observation struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	DialecticInteractionId string                 `protobuf:"bytes,1,opt,name=dialectic_interaction_id,json=dialecticInteractionId,proto3" json:"dialectic_interaction_id,omitempty"`
	Type                   ObservationType        `protobuf:"varint,2,opt,name=type,proto3,enum=ObservationType" json:"type,omitempty"`
	Resource               *Resource              `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	StateDistribution      map[string]float32     `protobuf:"bytes,4,rep,name=state_distribution,json=stateDistribution,proto3" json:"state_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Timestamp              int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Observation) Reset() {
	*x = Observation{}
	mi := &file_proto_models_dialectic_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{10}
}

func (x *Observation) GetDialecticInteractionId() string {
	if x != nil {
		return x.DialecticInteractionId
	}
	return ""
}

func (x *Observation) GetType() ObservationType {
	if x != nil {
		return x.Type
	}
	return ObservationType_OBSERVATION_TYPE_INVALID
}

func (x *Observation) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Observation) GetStateDistribution() map[string]float32 {
	if x != nil {
		return x.StateDistribution
	}
	return nil
}

func (x *Observation) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Update Discrepancy to remove observation_type
type Discrepancy struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	DialecticInteractionId string                 `protobuf:"bytes,1,opt,name=dialectic_interaction_id,json=dialecticInteractionId,proto3" json:"dialectic_interaction_id,omitempty"`                                                           // Relationship to interaction
	KlDivergence           float64                `protobuf:"fixed64,2,opt,name=kl_divergence,json=klDivergence,proto3" json:"kl_divergence,omitempty"`                                                                                         // KL(P||Q) where P is predicted and Q is observed
	PointwiseKlTerms       map[string]float32     `protobuf:"bytes,3,rep,name=pointwise_kl_terms,json=pointwiseKlTerms,proto3" json:"pointwise_kl_terms,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"` // P(x) * log(P(x)/Q(x)) for each state
	Timestamp              int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Discrepancy) Reset() {
	*x = Discrepancy{}
	mi := &file_proto_models_dialectic_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Discrepancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discrepancy) ProtoMessage() {}

func (x *Discrepancy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_dialectic_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discrepancy.ProtoReflect.Descriptor instead.
func (*Discrepancy) Descriptor() ([]byte, []int) {
	return file_proto_models_dialectic_proto_rawDescGZIP(), []int{11}
}

func (x *Discrepancy) GetDialecticInteractionId() string {
	if x != nil {
		return x.DialecticInteractionId
	}
	return ""
}

func (x *Discrepancy) GetKlDivergence() float64 {
	if x != nil {
		return x.KlDivergence
	}
	return 0
}

func (x *Discrepancy) GetPointwiseKlTerms() map[string]float32 {
	if x != nil {
		return x.PointwiseKlTerms
	}
	return nil
}

func (x *Discrepancy) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_models_dialectic_proto protoreflect.FileDescriptor

var file_proto_models_dialectic_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x55, 0x74, 0x63,
	0x22, 0x60, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x55,
	0x74, 0x63, 0x22, 0xd0, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x11,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x42, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x55, 0x74, 0x63, 0x22, 0xed, 0x01, 0x0a, 0x1d, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x79, 0x70,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x6c, 0x69,
	0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x65, 0x6c, 0x69,
	0x65, 0x66, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x55, 0x74, 0x63, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x55, 0x74, 0x63, 0x22, 0xd3, 0x04, 0x0a, 0x16, 0x44, 0x69,
	0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x55, 0x74, 0x63,
	0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc5, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x69,
	0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x54, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x02, 0x22, 0x84, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x0d, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x8e,
	0x02, 0x0a, 0x0e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x6c, 0x73, 0x69, 0x66, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x73, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x22,
	0xba, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcc, 0x02, 0x0a,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x6c, 0x5f, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6b, 0x6c,
	0x44, 0x69, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x6b, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x77, 0x69, 0x73, 0x65, 0x4b, 0x6c,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x77, 0x69, 0x73, 0x65, 0x4b, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x77, 0x69, 0x73, 0x65, 0x4b, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x53, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x59,
	0x50, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54,
	0x55, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x50,
	0x0a, 0x0d, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x45, 0x47,
	0x45, 0x4c, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x45, 0x45, 0x50,
	0x5f, 0x44, 0x49, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53, 0x45, 0x10, 0x03,
	0x2a, 0x56, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x42, 0x1d, 0x5a, 0x1b, 0x65, 0x70, 0x69, 0x73,
	0x74, 0x65, 0x6d, 0x69, 0x63, 0x2d, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_models_dialectic_proto_rawDescOnce sync.Once
	file_proto_models_dialectic_proto_rawDescData = file_proto_models_dialectic_proto_rawDesc
)

func file_proto_models_dialectic_proto_rawDescGZIP() []byte {
	file_proto_models_dialectic_proto_rawDescOnce.Do(func() {
		file_proto_models_dialectic_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_models_dialectic_proto_rawDescData)
	})
	return file_proto_models_dialectic_proto_rawDescData
}

var file_proto_models_dialectic_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_models_dialectic_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_models_dialectic_proto_goTypes = []any{
	(STATUS)(0),                           // 0: STATUS
	(InteractionType)(0),                  // 1: InteractionType
	(ActionType)(0),                       // 2: ActionType
	(DialecticType)(0),                    // 3: DialecticType
	(ObservationType)(0),                  // 4: ObservationType
	(Agent_AgentType)(0),                  // 5: Agent.AgentType
	(*Question)(nil),                      // 6: Question
	(*UserAnswer)(nil),                    // 7: UserAnswer
	(*QuestionAnswerInteraction)(nil),     // 8: QuestionAnswerInteraction
	(*HypothesisEvidenceInteraction)(nil), // 9: HypothesisEvidenceInteraction
	(*ActionOutcomeInteraction)(nil),      // 10: ActionOutcomeInteraction
	(*DialecticalInteraction)(nil),        // 11: DialecticalInteraction
	(*Agent)(nil),                         // 12: Agent
	(*Dialectic)(nil),                     // 13: Dialectic
	(*BeliefAnalysis)(nil),                // 14: BeliefAnalysis
	(*Action)(nil),                        // 15: Action
	(*Observation)(nil),                   // 16: Observation
	(*Discrepancy)(nil),                   // 17: Discrepancy
	nil,                                   // 18: Observation.StateDistributionEntry
	nil,                                   // 19: Discrepancy.PointwiseKlTermsEntry
	(*Belief)(nil),                        // 20: Belief
	(*BeliefSystem)(nil),                  // 21: BeliefSystem
	(*Resource)(nil),                      // 22: Resource
}
var file_proto_models_dialectic_proto_depIdxs = []int32{
	6,  // 0: QuestionAnswerInteraction.question:type_name -> Question
	7,  // 1: QuestionAnswerInteraction.answer:type_name -> UserAnswer
	20, // 2: QuestionAnswerInteraction.extracted_beliefs:type_name -> Belief
	20, // 3: HypothesisEvidenceInteraction.updated_beliefs:type_name -> Belief
	20, // 4: ActionOutcomeInteraction.updated_beliefs:type_name -> Belief
	0,  // 5: DialecticalInteraction.status:type_name -> STATUS
	1,  // 6: DialecticalInteraction.type:type_name -> InteractionType
	8,  // 7: DialecticalInteraction.question_answer:type_name -> QuestionAnswerInteraction
	9,  // 8: DialecticalInteraction.hypothesis_evidence:type_name -> HypothesisEvidenceInteraction
	10, // 9: DialecticalInteraction.action_outcome:type_name -> ActionOutcomeInteraction
	16, // 10: DialecticalInteraction.predicted_observation:type_name -> Observation
	15, // 11: DialecticalInteraction.action:type_name -> Action
	16, // 12: DialecticalInteraction.observation:type_name -> Observation
	17, // 13: DialecticalInteraction.discrepancy:type_name -> Discrepancy
	5,  // 14: Agent.agent_type:type_name -> Agent.AgentType
	3,  // 15: Agent.dialectic_type:type_name -> DialecticType
	12, // 16: Dialectic.agent:type_name -> Agent
	11, // 17: Dialectic.user_interactions:type_name -> DialecticalInteraction
	21, // 18: Dialectic.belief_system:type_name -> BeliefSystem
	14, // 19: Dialectic.analysis:type_name -> BeliefAnalysis
	2,  // 20: Action.type:type_name -> ActionType
	4,  // 21: Observation.type:type_name -> ObservationType
	22, // 22: Observation.resource:type_name -> Resource
	18, // 23: Observation.state_distribution:type_name -> Observation.StateDistributionEntry
	19, // 24: Discrepancy.pointwise_kl_terms:type_name -> Discrepancy.PointwiseKlTermsEntry
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_models_dialectic_proto_init() }
func file_proto_models_dialectic_proto_init() {
	if File_proto_models_dialectic_proto != nil {
		return
	}
	file_proto_models_beliefs_proto_init()
	file_proto_models_source_proto_init()
	file_proto_models_dialectic_proto_msgTypes[5].OneofWrappers = []any{
		(*DialecticalInteraction_QuestionAnswer)(nil),
		(*DialecticalInteraction_HypothesisEvidence)(nil),
		(*DialecticalInteraction_ActionOutcome)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_models_dialectic_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_models_dialectic_proto_goTypes,
		DependencyIndexes: file_proto_models_dialectic_proto_depIdxs,
		EnumInfos:         file_proto_models_dialectic_proto_enumTypes,
		MessageInfos:      file_proto_models_dialectic_proto_msgTypes,
	}.Build()
	File_proto_models_dialectic_proto = out.File
	file_proto_models_dialectic_proto_rawDesc = nil
	file_proto_models_dialectic_proto_goTypes = nil
	file_proto_models_dialectic_proto_depIdxs = nil
}
